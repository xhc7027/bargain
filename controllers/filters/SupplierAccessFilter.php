<?phpnamespace app\controllers\filters;use app\commons\SecurityUtil;use app\commons\HttpUtil;use app\commons\StringUtil;use app\commons\RememberUserUtil;use Yii;use yii\base\Behavior;use yii\web\Controller;/** * 判断商家用户是否已经登录 * @package app\components */class SupplierAccessFilter extends Behavior{    public function events()    {        return [Controller::EVENT_BEFORE_ACTION => 'beforeAction'];    }    /**     * <p>请求前置拦截</p>     * <p>     * 从会话中判断用户是否存在登录信息，如果有则允许访问商城，否则转发到爱豆子登录页面。     * </p>     * @param \yii\base\ActionEvent $event     * @return boolean     */    public function beforeAction($event)    {        $action = $event->action->id;        if (isset($_COOKIE['authorInfo'])) {            $t = RememberUserUtil::judgeUserInfo($_COOKIE['authorInfo']);            if (!$t && $t['code'] == 'FAIL'){                Yii::$app->response->redirect(Yii::$app->params['accessFilter']['SupplierAccessFilter']);            }            $t = $t['return_msg'];        } else {            $t = $this->getCookieTicket();        }        //如果cookie中的票据不存在        if (!$t) {            Yii::$app->session->destroy();            Yii::$app->response->redirect(Yii::$app->params['accessFilter']['SupplierAccessLogin']);        }        //cookie和session中的ticket不一样，需要去认证系统校验        if ($t !== Yii::$app->session->get('securityTicket')) {            $post['t'] = $t;            //向认证系统检验票据            $validateToSso = $this->validateToSso($post);            if (!$validateToSso) {                Yii::warning('用户访问一个受限页面' . $action, __METHOD__);                Yii::$app->response->redirect(Yii::$app->params['accessFilter']['SupplierAccessFilter']);            }            $event->isValid = $validateToSso;        }        return $event->isValid;    }    /**     * 向认证系统检验票据     * @param $ticket     * @return bool     */    private function validateToSso($ticket)    {        $get = array(            'timestamp' => time(),            'state' => StringUtil::genRandomStr()        );//拼装get参数        Yii::$app->session['securityState'] = $get['state'];        //1. 把票据发送到认证系统认证，如果认证成功则维护登录状态，认证失败返回false        $url = Yii::$app->params['serviceUrl']['ssoDomain'] . '/sso/validate.html?';        $get['sign'] = (new SecurityUtil($get, Yii::$app->params['signKey']['ssoSignKey']))->generateSign();        $url .= http_build_query($get);        $resp = json_decode(HttpUtil::post($url, $ticket), true);        //1.1 认证成功，加入信息到session        if ($resp['return_msg']['return_code'] === 'SUCCESS') {            //先把session中的信息全部清除            Yii::$app->session->destroy();            Yii::$app->session['securityTicket'] = $ticket['t'];            Yii::$app->session['userAuthInfo'] = $resp['return_msg']['return_msg'];            return true;        }        return false;    }    /**     * 获取cookie中的票据     *     * @return null|string     */    private function getCookieTicket()    {        //先关闭cookie验证        Yii::$app->request->enableCookieValidation = false;        $cookie = Yii::$app->request->getCookies();        if (!isset($cookie['ticket']->value)) {            //要把cookie验证重新设回true，不然有可能影响业务            Yii::$app->request->enableCookieValidation = true;            return null;        }        //判断加密用时间是否存在        if (!isset($cookie['ticketExpired']->value)) {            Yii::$app->request->enableCookieValidation = true;            return null;        }        $loginInfo = json_decode($cookie['ticket']->value, true);        $time = $cookie['ticketExpired']->value - 3600;        //sign验证        if ($loginInfo['sign'] != md5($loginInfo['t'] . Yii::$app->params['signKey']['iDouZiSignKey'] . $time)) {            Yii::warning('用户登录验证sign出错，参数：' . json_encode($loginInfo), __METHOD__);            Yii::$app->request->enableCookieValidation = true;            return null;        }        Yii::$app->request->enableCookieValidation = true;        return $loginInfo['t'];    }}